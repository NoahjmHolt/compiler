ant -f F:\\!CurrSchool\\CS4100\\JavaProj\\SP24Project5 -Dnb.internal.action.name=run run
init:
Deleting: F:\!CurrSchool\CS4100\JavaProj\SP24Project5\build\built-jar.properties
deps-jar:
Updating property file: F:\!CurrSchool\CS4100\JavaProj\SP24Project5\build\built-jar.properties
compile:
run:
Syntax Part B SP 2024, by <Student Name>
Parsing f:\SyntaxB-BAD-SP24.txt
0001 UNIT BAD3B;
f:\SyntaxB-BAD-SP24
	UNIT | 	0015 | 	UNIT
--> Entering Program
	IDNT | 	0050 | 	BAD3B
	SEMI | 	0036 | 	;
0002 
0003 (* This Part 3B test file has errors listed below *)
0004 VAR COUNT, TOTAL : INTEGER;
	VAR_ | 	0013 | 	VAR
 --> Entering Block
  --> Entering Variabledecsec
	IDNT | 	0050 | 	COUNT
	COMA | 	0044 | 	,
	IDNT | 	0050 | 	TOTAL
	COLN | 	0047 | 	:
	INTG | 	0001 | 	INTEGER
   --> Entering Simpletype
	SEMI | 	0036 | 	;
   <-- Exiting Simpletype
0005 
0006 VAR STOP : integer;
	VAR_ | 	0013 | 	VAR
  <-- Exiting variabledecsec
  --> Entering Variabledecsec
	IDNT | 	0050 | 	STOP
	COLN | 	0047 | 	:
	INTG | 	0001 | 	integer
   --> Entering Simpletype
	SEMI | 	0036 | 	;
   <-- Exiting Simpletype
0007 
0008 BEGIN
	BGIN | 	0011 | 	BEGIN
  <-- Exiting variabledecsec
  --> Entering Blockbody
0009 READLN(STOP);
	READ | 	0010 | 	READLN
   --> Entering Statement
    --> Entering handleReadln
	LPAR | 	0034 | 	(
	IDNT | 	0050 | 	STOP
     --> Entering Variable
	RPAR | 	0035 | 	)
     <-- Exiting Variable
	SEMI | 	0036 | 	;
    <-- Exiting handleReadln
   <-- Exiting Statement
0010 TOTAL := 12;
	IDNT | 	0050 | 	TOTAL
   --> Entering Statement
    --> Entering handleAssignment
     --> Entering Variable
	ASGN | 	0037 | 	:=
     <-- Exiting Variable
	ICNS | 	0051 | 	12
     --> Entering SimpleExpression
      --> Entering Term
       --> Entering Factor
        --> Entering UnsignedConstant
         --> Entering UnsignedNumber
	SEMI | 	0036 | 	;
         <-- Exiting UnsignedNumber
        <-- Exiting UnsignedConstant
       <-- Exiting Factor
      <-- Exiting Term
     <-- Exiting SimpleExpression
    <-- Exiting handleAssignment
   <-- Exiting Statement
0011 (* I is undeclared, a message to that effect should print, and continue on *)
0012 FOR I := 1 TO STOP DO
	FOR_ | 	0007 | 	FOR
   --> Entering Statement
    --> Entering handleFor
	IDNT | 	0050 | 	I
     --> Entering Variable
	ASGN | 	0037 | 	:=
     <-- Exiting Variable
	ICNS | 	0051 | 	1
     --> Entering SimpleExpression
      --> Entering Term
       --> Entering Factor
        --> Entering UnsignedConstant
         --> Entering UnsignedNumber
	_TO_ | 	0002 | 	TO
         <-- Exiting UnsignedNumber
        <-- Exiting UnsignedConstant
       <-- Exiting Factor
      <-- Exiting Term
     <-- Exiting SimpleExpression
	IDNT | 	0050 | 	STOP
     --> Entering SimpleExpression
      --> Entering Term
       --> Entering Factor
        --> Entering Variable
	_DO_ | 	0003 | 	DO
        <-- Exiting Variable
       <-- Exiting Factor
      <-- Exiting Term
     <-- Exiting SimpleExpression
0013   BEGIN
	BGIN | 	0011 | 	BEGIN
     --> Entering Statement
      --> Entering Blockbody
0014   TOTAL := TOTAL + I
	IDNT | 	0050 | 	TOTAL
       --> Entering Statement
        --> Entering handleAssignment
         --> Entering Variable
	ASGN | 	0037 | 	:=
         <-- Exiting Variable
	IDNT | 	0050 | 	TOTAL
         --> Entering SimpleExpression
          --> Entering Term
           --> Entering Factor
            --> Entering Variable
	PLUS | 	0032 | 	+
            <-- Exiting Variable
           <-- Exiting Factor
          <-- Exiting Term
	IDNT | 	0050 | 	I
          --> Entering Term
           --> Entering Factor
            --> Entering Variable
0015   END;
	END_ | 	0012 | 	END
            <-- Exiting Variable
           <-- Exiting Factor
          <-- Exiting Term
         <-- Exiting SimpleExpression
        <-- Exiting handleAssignment
       <-- Exiting Statement
	SEMI | 	0036 | 	;
      <-- Exiting Blockbody
     <-- Exiting Statement
    <-- Exiting handleFor
   <-- Exiting Statement
0016 
0017 (* Things go bad, not a statement start below, show EXPECTED,
0018    set ANYERRORS true, and resynch with statement-level parsing*)
0019 UNTIL TOTAL <= 20;
	UNTL | 	0018 | 	UNTIL
   --> Entering Statement
ERROR: Expected Statement start but found UNTIL
   <-- Exiting Statement
ERROR: Expected END but found UNTIL
  <-- Exiting Blockbody
 <-- Exiting Block
ERROR: Expected . but found UNTIL
<-- Exiting Program
Done.
BUILD SUCCESSFUL (total time: 0 seconds)
